# Compute an Air Quality Index (AQI) based on the sensor values.
#
# Used substitutions:
#
# - aqi_message_good: message shown for good air quality
# - aqi_message_acceptable: message shown for acceptable air quality
# - aqi_message_bad: message shown for bad air quality
# - aqi_co2_max_good: threshold for good CO₂ concentrations
# - aqi_co2_max_acceptable: threshold for acceptable CO₂ concentrations
# - aqi_pm2_5_avg_24h_max_good: threshold for good 24h average PM2.5
# - aqi_pm2_5_avg_24h_max_acceptable: threshold for acceptable 24h average PM2.5
# - aqi_pm10_avg_24h_max_good: threshold for good 24h average PM10
# - aqi_pm10_avg_24h_max_acceptable: threshold for acceptable 24h average PM10
# - node_name: name of the device
#
# IDs used outside this file:
#
# - update_aqi: script to update the AQI

## The WHO guidelines work with 24-hour averages of the PM2.5 and PM10 sensors
#sensor:
#  - platform: template
#    name: "${node_name} PM2.5 24h average"
#    id: pm2_5_avg_24h
#    icon: mdi:chemical-weapon
#    unit_of_measurement: µg/m³
#    lambda: |-
#      return id(pm2_5_value).state;
#    update_interval: 60s
#    filters:
#      - sliding_window_moving_average:
#          window_size: 1440  # = 24 hours x 60 minutes
#          send_every: 1
#    on_value:
#      then:
#        - script.execute: update_aqi
#  - platform: template
#    name: "${node_name} PM10 24h average"
#    id: pm10_avg_24h
#    icon: mdi:chemical-weapon
#    unit_of_measurement: µg/m³
#    lambda: |-
#      return id(pm10_value).state;
#    update_interval: 60s
#    filters:
#      - sliding_window_moving_average:
#          window_size: 1440  # = 24 hours x 60 minutes
#          send_every: 1
#    on_value:
#      then:
#        - script.execute: update_aqi

# Show the user whether the sensor has been calibrated yet
binary_sensor:
  - platform: template
    name: "${node_name} CO₂ sensor calibrated"
    id: co2_calibrated
    on_press:
      then:
        - switch.turn_on: show_calibrating
    on_release:
      then:
        - switch.turn_off: show_calibrating

# The sensor starts in an uncalibrated state after boot
esphome:
  on_boot:
#    priority: 500
    priority: 1
    then:
      - binary_sensor.template.publish:
          id: co2_calibrated
#          state: OFF
          state: ON

# A textual presentation of the AQI: good, acceptable, bad
text_sensor:
  - platform: template
    name: "${node_name} Air Quality Index"
    id: aqi
    icon: mdi:air-filter

# This script is called on every update of the relevant sensor values.
script:
  - id: update_aqi
    mode: restart
    then:
      # Bad if at least one of the sensor values is bad
      - if:
          condition:
            or:
              - sensor.in_range:
                  id: co2_value
                  above: ${aqi_co2_max_acceptable}
#              - sensor.in_range:
#                  id: pm2_5_avg_24h
#                  above: ${aqi_pm2_5_avg_24h_max_acceptable}
#              - sensor.in_range:
#                  id: pm10_avg_24h
#                  above: ${aqi_pm10_avg_24h_max_acceptable}
          then:
            - text_sensor.template.publish:
                id: aqi
                state: ${aqi_message_bad}
            - script.execute: show_bad
          else:
            # Acceptable if at least one of the sensor values is acceptable
            - if:
                condition:
                  or:
                    - sensor.in_range:
                        id: co2_value
                        above: ${aqi_co2_max_good}
#                    - sensor.in_range:
#                        id: pm2_5_avg_24h
#                        above: ${aqi_pm2_5_avg_24h_max_good}
#                    - sensor.in_range:
#                        id: pm10_avg_24h
#                        above: ${aqi_pm10_avg_24h_max_good}
                then:
                  - text_sensor.template.publish:
                      id: aqi
                      state: ${aqi_message_acceptable}
                  - script.execute: show_acceptable
                else:
                  # Otherwise good (all of the sensor values are good)
                  - text_sensor.template.publish:
                      id: aqi
                      state: ${aqi_message_good}
                  - script.execute: show_good
